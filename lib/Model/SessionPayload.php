<?php
/**
 * SessionPayload
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Equisoft\SDK\AccountService
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * User account and session management
 *
 * Provides HTTP endpoints to manage User Accounts and User Sessions.
 *
 * The version of the OpenAPI document: latest
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\AccountService\Model;

use \ArrayAccess;
use \Equisoft\SDK\AccountService\ObjectSerializer;

/**
 * SessionPayload Class Doc Comment
 *
 * @category Class
 * @description Data needed for the creation of a user session.
 * @package  Equisoft\SDK\AccountService
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SessionPayload implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SessionPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'userUuid' => 'string',
        'enable' => 'bool',
        'sso' => '\Equisoft\SDK\AccountService\Model\SsoProvider',
        'publicComputer' => 'bool',
        'mobileDevice' => 'bool',
        'cookieDomain' => 'string',
        'isPublicComputer' => 'bool',
        'isMobileDevice' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'userUuid' => null,
        'enable' => null,
        'sso' => null,
        'publicComputer' => null,
        'mobileDevice' => null,
        'cookieDomain' => null,
        'isPublicComputer' => null,
        'isMobileDevice' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'userUuid' => 'userUuid',
        'enable' => 'enable',
        'sso' => 'sso',
        'publicComputer' => 'publicComputer',
        'mobileDevice' => 'mobileDevice',
        'cookieDomain' => 'cookieDomain',
        'isPublicComputer' => 'isPublicComputer',
        'isMobileDevice' => 'isMobileDevice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'userUuid' => 'setUserUuid',
        'enable' => 'setEnable',
        'sso' => 'setSso',
        'publicComputer' => 'setPublicComputer',
        'mobileDevice' => 'setMobileDevice',
        'cookieDomain' => 'setCookieDomain',
        'isPublicComputer' => 'setIsPublicComputer',
        'isMobileDevice' => 'setIsMobileDevice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'userUuid' => 'getUserUuid',
        'enable' => 'getEnable',
        'sso' => 'getSso',
        'publicComputer' => 'getPublicComputer',
        'mobileDevice' => 'getMobileDevice',
        'cookieDomain' => 'getCookieDomain',
        'isPublicComputer' => 'getIsPublicComputer',
        'isMobileDevice' => 'getIsMobileDevice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['userUuid'] = $data['userUuid'] ?? null;
        $this->container['enable'] = $data['enable'] ?? null;
        $this->container['sso'] = $data['sso'] ?? null;
        $this->container['publicComputer'] = $data['publicComputer'] ?? null;
        $this->container['mobileDevice'] = $data['mobileDevice'] ?? null;
        $this->container['cookieDomain'] = $data['cookieDomain'] ?? null;
        $this->container['isPublicComputer'] = $data['isPublicComputer'] ?? null;
        $this->container['isMobileDevice'] = $data['isMobileDevice'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['userUuid'] === null) {
            $invalidProperties[] = "'userUuid' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets userUuid
     *
     * @return string
     */
    public function getUserUuid()
    {
        return $this->container['userUuid'];
    }

    /**
     * Sets userUuid
     *
     * @param string $userUuid Globally unique identifier.
     *
     * @return self
     */
    public function setUserUuid($userUuid)
    {
        $this->container['userUuid'] = $userUuid;

        return $this;
    }

    /**
     * Gets enable
     *
     * @return bool|null
     */
    public function getEnable()
    {
        return $this->container['enable'];
    }

    /**
     * Sets enable
     *
     * @param bool|null $enable enable
     *
     * @return self
     */
    public function setEnable($enable)
    {
        $this->container['enable'] = $enable;

        return $this;
    }

    /**
     * Gets sso
     *
     * @return \Equisoft\SDK\AccountService\Model\SsoProvider|null
     */
    public function getSso()
    {
        return $this->container['sso'];
    }

    /**
     * Sets sso
     *
     * @param \Equisoft\SDK\AccountService\Model\SsoProvider|null $sso sso
     *
     * @return self
     */
    public function setSso($sso)
    {
        $this->container['sso'] = $sso;

        return $this;
    }

    /**
     * Gets publicComputer
     *
     * @return bool|null
     */
    public function getPublicComputer()
    {
        return $this->container['publicComputer'];
    }

    /**
     * Sets publicComputer
     *
     * @param bool|null $publicComputer Indicate that the session is initiated from a public computer.
     *
     * @return self
     */
    public function setPublicComputer($publicComputer)
    {
        $this->container['publicComputer'] = $publicComputer;

        return $this;
    }

    /**
     * Gets mobileDevice
     *
     * @return bool|null
     */
    public function getMobileDevice()
    {
        return $this->container['mobileDevice'];
    }

    /**
     * Sets mobileDevice
     *
     * @param bool|null $mobileDevice Indicate that the session is initiated from a mobile device.
     *
     * @return self
     */
    public function setMobileDevice($mobileDevice)
    {
        $this->container['mobileDevice'] = $mobileDevice;

        return $this;
    }

    /**
     * Gets cookieDomain
     *
     * @return string|null
     */
    public function getCookieDomain()
    {
        return $this->container['cookieDomain'];
    }

    /**
     * Sets cookieDomain
     *
     * @param string|null $cookieDomain Indicate the domain name the session cookie was emitted for. If null, the cookie is assumed to be on the current hostname.
     *
     * @return self
     */
    public function setCookieDomain($cookieDomain)
    {
        $this->container['cookieDomain'] = $cookieDomain;

        return $this;
    }

    /**
     * Gets isPublicComputer
     *
     * @return bool|null
     */
    public function getIsPublicComputer()
    {
        return $this->container['isPublicComputer'];
    }

    /**
     * Sets isPublicComputer
     *
     * @param bool|null $isPublicComputer Indicate that the session is initiated from a public computer.
     *
     * @return self
     */
    public function setIsPublicComputer($isPublicComputer)
    {
        $this->container['isPublicComputer'] = $isPublicComputer;

        return $this;
    }

    /**
     * Gets isMobileDevice
     *
     * @return bool|null
     */
    public function getIsMobileDevice()
    {
        return $this->container['isMobileDevice'];
    }

    /**
     * Sets isMobileDevice
     *
     * @param bool|null $isMobileDevice Indicate that the session is initiated from a mobile device.
     *
     * @return self
     */
    public function setIsMobileDevice($isMobileDevice)
    {
        $this->container['isMobileDevice'] = $isMobileDevice;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


