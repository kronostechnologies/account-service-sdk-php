<?php
/**
 * SessionPayload
 *
 * PHP version 5
 *
 * @category Class
 * @package  Equisoft\SDK\AccountService
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * User account and session management
 *
 * Provides HTTP endpoints to manage User Accounts and User Sessions.
 *
 * The version of the OpenAPI document: latest
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\AccountService\Model;

use \ArrayAccess;
use \Equisoft\SDK\AccountService\ObjectSerializer;

/**
 * SessionPayload Class Doc Comment
 *
 * @category Class
 * @description Data needed for the creation of a user session.
 * @package  Equisoft\SDK\AccountService
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SessionPayload implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SessionPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'userUuid' => 'string',
        'absoluteTimeout' => 'int',
        'enable' => 'bool',
        'sso' => '\Equisoft\SDK\AccountService\Model\SsoProvider',
        'mobile' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'userUuid' => null,
        'absoluteTimeout' => 'int64',
        'enable' => null,
        'sso' => null,
        'mobile' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'userUuid' => 'userUuid',
        'absoluteTimeout' => 'absoluteTimeout',
        'enable' => 'enable',
        'sso' => 'sso',
        'mobile' => 'mobile'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'userUuid' => 'setUserUuid',
        'absoluteTimeout' => 'setAbsoluteTimeout',
        'enable' => 'setEnable',
        'sso' => 'setSso',
        'mobile' => 'setMobile'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'userUuid' => 'getUserUuid',
        'absoluteTimeout' => 'getAbsoluteTimeout',
        'enable' => 'getEnable',
        'sso' => 'getSso',
        'mobile' => 'getMobile'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['userUuid'] = isset($data['userUuid']) ? $data['userUuid'] : null;
        $this->container['absoluteTimeout'] = isset($data['absoluteTimeout']) ? $data['absoluteTimeout'] : null;
        $this->container['enable'] = isset($data['enable']) ? $data['enable'] : null;
        $this->container['sso'] = isset($data['sso']) ? $data['sso'] : null;
        $this->container['mobile'] = isset($data['mobile']) ? $data['mobile'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['absoluteTimeout']) && ($this->container['absoluteTimeout'] < 1)) {
            $invalidProperties[] = "invalid value for 'absoluteTimeout', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets userUuid
     *
     * @return string|null
     */
    public function getUserUuid()
    {
        return $this->container['userUuid'];
    }

    /**
     * Sets userUuid
     *
     * @param string|null $userUuid Globally unique identifier.
     *
     * @return $this
     */
    public function setUserUuid($userUuid)
    {
        $this->container['userUuid'] = $userUuid;

        return $this;
    }

    /**
     * Gets absoluteTimeout
     *
     * @return int|null
     */
    public function getAbsoluteTimeout()
    {
        return $this->container['absoluteTimeout'];
    }

    /**
     * Sets absoluteTimeout
     *
     * @param int|null $absoluteTimeout This timeout (in seconds) defines the maximum amount of time a session can be active.
     *
     * @return $this
     */
    public function setAbsoluteTimeout($absoluteTimeout)
    {

        if (!is_null($absoluteTimeout) && ($absoluteTimeout < 1)) {
            throw new \InvalidArgumentException('invalid value for $absoluteTimeout when calling SessionPayload., must be bigger than or equal to 1.');
        }

        $this->container['absoluteTimeout'] = $absoluteTimeout;

        return $this;
    }

    /**
     * Gets enable
     *
     * @return bool|null
     */
    public function getEnable()
    {
        return $this->container['enable'];
    }

    /**
     * Sets enable
     *
     * @param bool|null $enable enable
     *
     * @return $this
     */
    public function setEnable($enable)
    {
        $this->container['enable'] = $enable;

        return $this;
    }

    /**
     * Gets sso
     *
     * @return \Equisoft\SDK\AccountService\Model\SsoProvider|null
     */
    public function getSso()
    {
        return $this->container['sso'];
    }

    /**
     * Sets sso
     *
     * @param \Equisoft\SDK\AccountService\Model\SsoProvider|null $sso sso
     *
     * @return $this
     */
    public function setSso($sso)
    {
        $this->container['sso'] = $sso;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return bool|null
     */
    public function getMobile()
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     *
     * @param bool|null $mobile Indicate that the session is initiated from a mobile device.
     *
     * @return $this
     */
    public function setMobile($mobile)
    {
        $this->container['mobile'] = $mobile;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


