<?php
/**
 * OrganizationApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Equisoft\SDK\AccountService
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * User account and session management
 *
 * Provides HTTP endpoints to manage User Accounts and User Sessions.
 *
 * The version of the OpenAPI document: 0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\AccountService\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Equisoft\SDK\AccountService\ApiException;
use Equisoft\SDK\AccountService\Configuration;
use Equisoft\SDK\AccountService\HeaderSelector;
use Equisoft\SDK\AccountService\ObjectSerializer;

/**
 * OrganizationApi Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\AccountService
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrganizationApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createOrUpdateOrganization
     *
     * Create or update an organization for a given uuid
     *
     * @param  string $uuid The organization identifier (required)
     * @param  \Equisoft\SDK\AccountService\Model\CreateOrUpdateOrganizationPayload $createOrUpdateOrganizationPayload createOrUpdateOrganizationPayload (required)
     *
     * @throws \Equisoft\SDK\AccountService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Equisoft\SDK\AccountService\Model\OrganizationCreated|\Equisoft\SDK\AccountService\Model\ErrorPayload
     */
    public function createOrUpdateOrganization($uuid, $createOrUpdateOrganizationPayload)
    {
        list($response) = $this->createOrUpdateOrganizationWithHttpInfo($uuid, $createOrUpdateOrganizationPayload);
        return $response;
    }

    /**
     * Operation createOrUpdateOrganizationWithHttpInfo
     *
     * Create or update an organization for a given uuid
     *
     * @param  string $uuid The organization identifier (required)
     * @param  \Equisoft\SDK\AccountService\Model\CreateOrUpdateOrganizationPayload $createOrUpdateOrganizationPayload (required)
     *
     * @throws \Equisoft\SDK\AccountService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Equisoft\SDK\AccountService\Model\OrganizationCreated|\Equisoft\SDK\AccountService\Model\ErrorPayload, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrUpdateOrganizationWithHttpInfo($uuid, $createOrUpdateOrganizationPayload)
    {
        $request = $this->createOrUpdateOrganizationRequest($uuid, $createOrUpdateOrganizationPayload);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\Equisoft\SDK\AccountService\Model\OrganizationCreated' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Equisoft\SDK\AccountService\Model\OrganizationCreated', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Equisoft\SDK\AccountService\Model\ErrorPayload' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Equisoft\SDK\AccountService\Model\ErrorPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Equisoft\SDK\AccountService\Model\OrganizationCreated';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Equisoft\SDK\AccountService\Model\OrganizationCreated',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Equisoft\SDK\AccountService\Model\ErrorPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrUpdateOrganizationAsync
     *
     * Create or update an organization for a given uuid
     *
     * @param  string $uuid The organization identifier (required)
     * @param  \Equisoft\SDK\AccountService\Model\CreateOrUpdateOrganizationPayload $createOrUpdateOrganizationPayload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrUpdateOrganizationAsync($uuid, $createOrUpdateOrganizationPayload)
    {
        return $this->createOrUpdateOrganizationAsyncWithHttpInfo($uuid, $createOrUpdateOrganizationPayload)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrUpdateOrganizationAsyncWithHttpInfo
     *
     * Create or update an organization for a given uuid
     *
     * @param  string $uuid The organization identifier (required)
     * @param  \Equisoft\SDK\AccountService\Model\CreateOrUpdateOrganizationPayload $createOrUpdateOrganizationPayload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrUpdateOrganizationAsyncWithHttpInfo($uuid, $createOrUpdateOrganizationPayload)
    {
        $returnType = '\Equisoft\SDK\AccountService\Model\OrganizationCreated';
        $request = $this->createOrUpdateOrganizationRequest($uuid, $createOrUpdateOrganizationPayload);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrUpdateOrganization'
     *
     * @param  string $uuid The organization identifier (required)
     * @param  \Equisoft\SDK\AccountService\Model\CreateOrUpdateOrganizationPayload $createOrUpdateOrganizationPayload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrUpdateOrganizationRequest($uuid, $createOrUpdateOrganizationPayload)
    {
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling createOrUpdateOrganization'
            );
        }
        if (strlen($uuid) < 1) {
            throw new \InvalidArgumentException('invalid length for "$uuid" when calling OrganizationApi.createOrUpdateOrganization, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'createOrUpdateOrganizationPayload' is set
        if ($createOrUpdateOrganizationPayload === null || (is_array($createOrUpdateOrganizationPayload) && count($createOrUpdateOrganizationPayload) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createOrUpdateOrganizationPayload when calling createOrUpdateOrganization'
            );
        }

        $resourcePath = '/organizations/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createOrUpdateOrganizationPayload)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createOrUpdateOrganizationPayload));
            } else {
                $httpBody = $createOrUpdateOrganizationPayload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrUpdateRole
     *
     * Create or update organization roles for a given uuid
     *
     * @param  string $uuid uuid (required)
     * @param  string $roleId roleId (required)
     * @param  \Equisoft\SDK\AccountService\Model\CreateRole $createRole createRole (required)
     *
     * @throws \Equisoft\SDK\AccountService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Equisoft\SDK\AccountService\Model\RoleCreated|\Equisoft\SDK\AccountService\Model\ErrorPayload
     */
    public function createOrUpdateRole($uuid, $roleId, $createRole)
    {
        list($response) = $this->createOrUpdateRoleWithHttpInfo($uuid, $roleId, $createRole);
        return $response;
    }

    /**
     * Operation createOrUpdateRoleWithHttpInfo
     *
     * Create or update organization roles for a given uuid
     *
     * @param  string $uuid (required)
     * @param  string $roleId (required)
     * @param  \Equisoft\SDK\AccountService\Model\CreateRole $createRole (required)
     *
     * @throws \Equisoft\SDK\AccountService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Equisoft\SDK\AccountService\Model\RoleCreated|\Equisoft\SDK\AccountService\Model\ErrorPayload, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrUpdateRoleWithHttpInfo($uuid, $roleId, $createRole)
    {
        $request = $this->createOrUpdateRoleRequest($uuid, $roleId, $createRole);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Equisoft\SDK\AccountService\Model\RoleCreated' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Equisoft\SDK\AccountService\Model\RoleCreated', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Equisoft\SDK\AccountService\Model\ErrorPayload' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Equisoft\SDK\AccountService\Model\ErrorPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Equisoft\SDK\AccountService\Model\RoleCreated';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Equisoft\SDK\AccountService\Model\RoleCreated',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Equisoft\SDK\AccountService\Model\ErrorPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrUpdateRoleAsync
     *
     * Create or update organization roles for a given uuid
     *
     * @param  string $uuid (required)
     * @param  string $roleId (required)
     * @param  \Equisoft\SDK\AccountService\Model\CreateRole $createRole (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrUpdateRoleAsync($uuid, $roleId, $createRole)
    {
        return $this->createOrUpdateRoleAsyncWithHttpInfo($uuid, $roleId, $createRole)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrUpdateRoleAsyncWithHttpInfo
     *
     * Create or update organization roles for a given uuid
     *
     * @param  string $uuid (required)
     * @param  string $roleId (required)
     * @param  \Equisoft\SDK\AccountService\Model\CreateRole $createRole (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrUpdateRoleAsyncWithHttpInfo($uuid, $roleId, $createRole)
    {
        $returnType = '\Equisoft\SDK\AccountService\Model\RoleCreated';
        $request = $this->createOrUpdateRoleRequest($uuid, $roleId, $createRole);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrUpdateRole'
     *
     * @param  string $uuid (required)
     * @param  string $roleId (required)
     * @param  \Equisoft\SDK\AccountService\Model\CreateRole $createRole (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrUpdateRoleRequest($uuid, $roleId, $createRole)
    {
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling createOrUpdateRole'
            );
        }
        // verify the required parameter 'roleId' is set
        if ($roleId === null || (is_array($roleId) && count($roleId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $roleId when calling createOrUpdateRole'
            );
        }
        // verify the required parameter 'createRole' is set
        if ($createRole === null || (is_array($createRole) && count($createRole) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createRole when calling createOrUpdateRole'
            );
        }

        $resourcePath = '/organizations/{uuid}/roles/{roleId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }
        // path params
        if ($roleId !== null) {
            $resourcePath = str_replace(
                '{' . 'roleId' . '}',
                ObjectSerializer::toPathValue($roleId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createRole)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createRole));
            } else {
                $httpBody = $createRole;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrganization
     *
     * Creates a new organization
     *
     * @param  \Equisoft\SDK\AccountService\Model\CreateOrganizationPayload $createOrganizationPayload createOrganizationPayload (required)
     *
     * @throws \Equisoft\SDK\AccountService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Equisoft\SDK\AccountService\Model\OrganizationCreated|\Equisoft\SDK\AccountService\Model\ErrorPayload|\Equisoft\SDK\AccountService\Model\ErrorPayload
     */
    public function createOrganization($createOrganizationPayload)
    {
        list($response) = $this->createOrganizationWithHttpInfo($createOrganizationPayload);
        return $response;
    }

    /**
     * Operation createOrganizationWithHttpInfo
     *
     * Creates a new organization
     *
     * @param  \Equisoft\SDK\AccountService\Model\CreateOrganizationPayload $createOrganizationPayload (required)
     *
     * @throws \Equisoft\SDK\AccountService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Equisoft\SDK\AccountService\Model\OrganizationCreated|\Equisoft\SDK\AccountService\Model\ErrorPayload|\Equisoft\SDK\AccountService\Model\ErrorPayload, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrganizationWithHttpInfo($createOrganizationPayload)
    {
        $request = $this->createOrganizationRequest($createOrganizationPayload);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\Equisoft\SDK\AccountService\Model\OrganizationCreated' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Equisoft\SDK\AccountService\Model\OrganizationCreated', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Equisoft\SDK\AccountService\Model\ErrorPayload' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Equisoft\SDK\AccountService\Model\ErrorPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Equisoft\SDK\AccountService\Model\ErrorPayload' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Equisoft\SDK\AccountService\Model\ErrorPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Equisoft\SDK\AccountService\Model\OrganizationCreated';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Equisoft\SDK\AccountService\Model\OrganizationCreated',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Equisoft\SDK\AccountService\Model\ErrorPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Equisoft\SDK\AccountService\Model\ErrorPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrganizationAsync
     *
     * Creates a new organization
     *
     * @param  \Equisoft\SDK\AccountService\Model\CreateOrganizationPayload $createOrganizationPayload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationAsync($createOrganizationPayload)
    {
        return $this->createOrganizationAsyncWithHttpInfo($createOrganizationPayload)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrganizationAsyncWithHttpInfo
     *
     * Creates a new organization
     *
     * @param  \Equisoft\SDK\AccountService\Model\CreateOrganizationPayload $createOrganizationPayload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationAsyncWithHttpInfo($createOrganizationPayload)
    {
        $returnType = '\Equisoft\SDK\AccountService\Model\OrganizationCreated';
        $request = $this->createOrganizationRequest($createOrganizationPayload);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrganization'
     *
     * @param  \Equisoft\SDK\AccountService\Model\CreateOrganizationPayload $createOrganizationPayload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrganizationRequest($createOrganizationPayload)
    {
        // verify the required parameter 'createOrganizationPayload' is set
        if ($createOrganizationPayload === null || (is_array($createOrganizationPayload) && count($createOrganizationPayload) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createOrganizationPayload when calling createOrganization'
            );
        }

        $resourcePath = '/organizations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createOrganizationPayload)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createOrganizationPayload));
            } else {
                $httpBody = $createOrganizationPayload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createRole
     *
     * Create organization roles for a given uuid
     *
     * @param  string $uuid uuid (required)
     * @param  \Equisoft\SDK\AccountService\Model\CreateRole $createRole createRole (required)
     *
     * @throws \Equisoft\SDK\AccountService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Equisoft\SDK\AccountService\Model\RoleCreated|\Equisoft\SDK\AccountService\Model\ErrorPayload
     */
    public function createRole($uuid, $createRole)
    {
        list($response) = $this->createRoleWithHttpInfo($uuid, $createRole);
        return $response;
    }

    /**
     * Operation createRoleWithHttpInfo
     *
     * Create organization roles for a given uuid
     *
     * @param  string $uuid (required)
     * @param  \Equisoft\SDK\AccountService\Model\CreateRole $createRole (required)
     *
     * @throws \Equisoft\SDK\AccountService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Equisoft\SDK\AccountService\Model\RoleCreated|\Equisoft\SDK\AccountService\Model\ErrorPayload, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRoleWithHttpInfo($uuid, $createRole)
    {
        $request = $this->createRoleRequest($uuid, $createRole);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\Equisoft\SDK\AccountService\Model\RoleCreated' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Equisoft\SDK\AccountService\Model\RoleCreated', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Equisoft\SDK\AccountService\Model\ErrorPayload' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Equisoft\SDK\AccountService\Model\ErrorPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Equisoft\SDK\AccountService\Model\RoleCreated';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Equisoft\SDK\AccountService\Model\RoleCreated',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Equisoft\SDK\AccountService\Model\ErrorPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createRoleAsync
     *
     * Create organization roles for a given uuid
     *
     * @param  string $uuid (required)
     * @param  \Equisoft\SDK\AccountService\Model\CreateRole $createRole (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRoleAsync($uuid, $createRole)
    {
        return $this->createRoleAsyncWithHttpInfo($uuid, $createRole)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createRoleAsyncWithHttpInfo
     *
     * Create organization roles for a given uuid
     *
     * @param  string $uuid (required)
     * @param  \Equisoft\SDK\AccountService\Model\CreateRole $createRole (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRoleAsyncWithHttpInfo($uuid, $createRole)
    {
        $returnType = '\Equisoft\SDK\AccountService\Model\RoleCreated';
        $request = $this->createRoleRequest($uuid, $createRole);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRole'
     *
     * @param  string $uuid (required)
     * @param  \Equisoft\SDK\AccountService\Model\CreateRole $createRole (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createRoleRequest($uuid, $createRole)
    {
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling createRole'
            );
        }
        // verify the required parameter 'createRole' is set
        if ($createRole === null || (is_array($createRole) && count($createRole) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createRole when calling createRole'
            );
        }

        $resourcePath = '/organizations/{uuid}/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createRole)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createRole));
            } else {
                $httpBody = $createRole;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganization
     *
     * Get detailed information about an organization.
     *
     * @param  string $uuid The organization identifier (required)
     * @param  string $xUserUuid Uuid of the user for whom the call is made. Used to apply access and security rules (optional)
     *
     * @throws \Equisoft\SDK\AccountService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Equisoft\SDK\AccountService\Model\Organization|\Equisoft\SDK\AccountService\Model\ErrorPayload
     */
    public function getOrganization($uuid, $xUserUuid = null)
    {
        list($response) = $this->getOrganizationWithHttpInfo($uuid, $xUserUuid);
        return $response;
    }

    /**
     * Operation getOrganizationWithHttpInfo
     *
     * Get detailed information about an organization.
     *
     * @param  string $uuid The organization identifier (required)
     * @param  string $xUserUuid Uuid of the user for whom the call is made. Used to apply access and security rules (optional)
     *
     * @throws \Equisoft\SDK\AccountService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Equisoft\SDK\AccountService\Model\Organization|\Equisoft\SDK\AccountService\Model\ErrorPayload, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationWithHttpInfo($uuid, $xUserUuid = null)
    {
        $request = $this->getOrganizationRequest($uuid, $xUserUuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Equisoft\SDK\AccountService\Model\Organization' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Equisoft\SDK\AccountService\Model\Organization', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Equisoft\SDK\AccountService\Model\ErrorPayload' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Equisoft\SDK\AccountService\Model\ErrorPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Equisoft\SDK\AccountService\Model\Organization';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Equisoft\SDK\AccountService\Model\Organization',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Equisoft\SDK\AccountService\Model\ErrorPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationAsync
     *
     * Get detailed information about an organization.
     *
     * @param  string $uuid The organization identifier (required)
     * @param  string $xUserUuid Uuid of the user for whom the call is made. Used to apply access and security rules (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationAsync($uuid, $xUserUuid = null)
    {
        return $this->getOrganizationAsyncWithHttpInfo($uuid, $xUserUuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationAsyncWithHttpInfo
     *
     * Get detailed information about an organization.
     *
     * @param  string $uuid The organization identifier (required)
     * @param  string $xUserUuid Uuid of the user for whom the call is made. Used to apply access and security rules (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationAsyncWithHttpInfo($uuid, $xUserUuid = null)
    {
        $returnType = '\Equisoft\SDK\AccountService\Model\Organization';
        $request = $this->getOrganizationRequest($uuid, $xUserUuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganization'
     *
     * @param  string $uuid The organization identifier (required)
     * @param  string $xUserUuid Uuid of the user for whom the call is made. Used to apply access and security rules (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationRequest($uuid, $xUserUuid = null)
    {
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling getOrganization'
            );
        }

        $resourcePath = '/organizations/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($xUserUuid !== null) {
            $headerParams['X-User-Uuid'] = ObjectSerializer::toHeaderValue($xUserUuid);
        }

        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listOrganization
     *
     * List organizations
     *
     * @param  int $max Max number of organizations per page. (required)
     * @param  string $pageToken Page token to start with. (optional)
     * @param  string $parent Parent uuid. (optional)
     * @param  string $xUserUuid Uuid of the user for whom the call is made. Used to apply access and security rules (optional)
     *
     * @throws \Equisoft\SDK\AccountService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Equisoft\SDK\AccountService\Model\ListUserOrganizations
     */
    public function listOrganization($max, $pageToken = null, $parent = null, $xUserUuid = null)
    {
        list($response) = $this->listOrganizationWithHttpInfo($max, $pageToken, $parent, $xUserUuid);
        return $response;
    }

    /**
     * Operation listOrganizationWithHttpInfo
     *
     * List organizations
     *
     * @param  int $max Max number of organizations per page. (required)
     * @param  string $pageToken Page token to start with. (optional)
     * @param  string $parent Parent uuid. (optional)
     * @param  string $xUserUuid Uuid of the user for whom the call is made. Used to apply access and security rules (optional)
     *
     * @throws \Equisoft\SDK\AccountService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Equisoft\SDK\AccountService\Model\ListUserOrganizations, HTTP status code, HTTP response headers (array of strings)
     */
    public function listOrganizationWithHttpInfo($max, $pageToken = null, $parent = null, $xUserUuid = null)
    {
        $request = $this->listOrganizationRequest($max, $pageToken, $parent, $xUserUuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Equisoft\SDK\AccountService\Model\ListUserOrganizations' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Equisoft\SDK\AccountService\Model\ListUserOrganizations', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Equisoft\SDK\AccountService\Model\ListUserOrganizations';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Equisoft\SDK\AccountService\Model\ListUserOrganizations',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listOrganizationAsync
     *
     * List organizations
     *
     * @param  int $max Max number of organizations per page. (required)
     * @param  string $pageToken Page token to start with. (optional)
     * @param  string $parent Parent uuid. (optional)
     * @param  string $xUserUuid Uuid of the user for whom the call is made. Used to apply access and security rules (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listOrganizationAsync($max, $pageToken = null, $parent = null, $xUserUuid = null)
    {
        return $this->listOrganizationAsyncWithHttpInfo($max, $pageToken, $parent, $xUserUuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listOrganizationAsyncWithHttpInfo
     *
     * List organizations
     *
     * @param  int $max Max number of organizations per page. (required)
     * @param  string $pageToken Page token to start with. (optional)
     * @param  string $parent Parent uuid. (optional)
     * @param  string $xUserUuid Uuid of the user for whom the call is made. Used to apply access and security rules (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listOrganizationAsyncWithHttpInfo($max, $pageToken = null, $parent = null, $xUserUuid = null)
    {
        $returnType = '\Equisoft\SDK\AccountService\Model\ListUserOrganizations';
        $request = $this->listOrganizationRequest($max, $pageToken, $parent, $xUserUuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listOrganization'
     *
     * @param  int $max Max number of organizations per page. (required)
     * @param  string $pageToken Page token to start with. (optional)
     * @param  string $parent Parent uuid. (optional)
     * @param  string $xUserUuid Uuid of the user for whom the call is made. Used to apply access and security rules (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listOrganizationRequest($max, $pageToken = null, $parent = null, $xUserUuid = null)
    {
        // verify the required parameter 'max' is set
        if ($max === null || (is_array($max) && count($max) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $max when calling listOrganization'
            );
        }

        $resourcePath = '/organizations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($max !== null) {
            if('form' === 'form' && is_array($max)) {
                foreach($max as $key => $value) {
                    $queryParams[$key] = ObjectSerializer::toString($value);
                }
            }
            else {
                $queryParams['max'] = ObjectSerializer::toString($max);
            }
        }
        // query params
        if ($pageToken !== null) {
            if('form' === 'form' && is_array($pageToken)) {
                foreach($pageToken as $key => $value) {
                    $queryParams[$key] = ObjectSerializer::toString($value);
                }
            }
            else {
                $queryParams['pageToken'] = ObjectSerializer::toString($pageToken);
            }
        }
        // query params
        if ($parent !== null) {
            if('form' === 'form' && is_array($parent)) {
                foreach($parent as $key => $value) {
                    $queryParams[$key] = ObjectSerializer::toString($value);
                }
            }
            else {
                $queryParams['parent'] = ObjectSerializer::toString($parent);
            }
        }

        // header params
        if ($xUserUuid !== null) {
            $headerParams['X-User-Uuid'] = ObjectSerializer::toHeaderValue($xUserUuid);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
